/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum NodeType {
  Unparsed = 'Unparsed',
  Directory = 'Directory',
  File = 'File',
  Class = 'Class',
  Function = 'Function'
}
export const enum EdgeType {
  Contains = 'Contains',
  Imports = 'Imports',
  Inherits = 'Inherits',
  References = 'References'
}
export interface Node {
  /** File path */
  name: string
  shortNames: Array<string>
  type: NodeType
  language: string
  /** Start line (0-based) */
  startLine: number
  /** End line (0-based) */
  endLine: number
  /** The code text */
  code: string
}
export interface Relationship {
  /** 关系类型 */
  type: EdgeType
  /** 起始节点 */
  from: Node
  /** 目标节点 */
  to: Node
  /** 导入路径（可选） */
  import?: string
  /** 别名（可选） */
  alias?: string
}
export interface ParserConfig {
  /** Whether to recursively traverse subdirectories (default is true) */
  recursive?: boolean
  /** Whether to follow symbolic links (default is false) */
  followLinks?: boolean
  /** Maximum recursion depth, None means no limit (default is 0) */
  maxDepth?: number
  /** Whether to continue traversal when encountering errors (default is false) */
  continueOnError?: boolean
  /**
   * Ignore patterns following gitignore syntax (default is empty)
   * Each pattern follows gitignore rules:
   * - Pattern starting with '!' negates the pattern
   * - Pattern ending with '/' matches directories only
   * - Pattern starting with '/' is anchored to root
   * - '*' matches any sequence of characters except '/'
   * - '**' matches any sequence of characters including '/'
   * - '?' matches any single character
   * - '[abc]' matches any character in brackets
   */
  ignorePatterns?: Array<string>
  /** Whether to use .gitignore files found in directories (default is true) */
  useGitignoreFiles?: boolean
  /**
   * Output directory for saving parsed nodes as JSON file (default is None)
   * If specified, the parsed nodes will be written to a JSON file in this directory
   */
  outDir?: string
}
export interface ParseResult {
  nodes: Array<Node>
  relationships: Array<Relationship>
}
export declare class Parser {
  constructor(config: ParserConfig)
  parse(dirPath: string): ParseResult
}
